<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My persoanl blog</title>
    <link>/</link>
    <description>Recent content on My persoanl blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Welcome to Tranquilpeak 0.4.4-BETA</title>
      <link>/2018/11/welcome-to-tranquilpeak-0.4.4-beta/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/welcome-to-tranquilpeak-0.4.4-beta/</guid>
      <description>&lt;p&gt;My personal  blog based on  the &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; theme &lt;a href=&#34;https://themes.gohugo.io/hugo-tranquilpeak-theme&#34;&gt;Tranquilpeak&lt;/a&gt;, whose author is &lt;a href=&#34;https://github.com/kakawait&#34;&gt;kakawait&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MATLAB制作2048game和auto-player (3)</title>
      <link>/2018/10/matlab%E5%88%B6%E4%BD%9C2048game%E5%92%8Cauto-player-3/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/matlab%E5%88%B6%E4%BD%9C2048game%E5%92%8Cauto-player-3/</guid>
      <description>&lt;p&gt;这一节讲述如何写出一个会自动玩的&lt;code&gt;AI-player&lt;/code&gt;. 先以棋类游戏为例, 我们下棋都会思考每一步下到哪是最好的? 而且更厉害的棋手会想到接下来的几步的局面将会想何处发展,  自己应该下哪一步才可以让自己的局势是最好的. 这是最朴素也是最好用的方法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从中值定理到Runge-Kutta法</title>
      <link>/2018/10/%E4%BB%8E%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%88%B0runge-kutta%E6%B3%95/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/%E4%BB%8E%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%88%B0runge-kutta%E6%B3%95/</guid>
      <description>&lt;p&gt;对于一个一阶线性微分方程，&lt;/p&gt;

&lt;p&gt;$$\frac{dy}{dx} = f(x, y), x \in (x_{start}, x_{end})$$&lt;/p&gt;

&lt;p&gt;给定初值\(y(x_0) = y_0\), 一般来说, 当\(f\)是一个具有好的性质的函数时, 例如连续可导, 那么该问题是具有唯一解的. 本文主要介绍如何在有限的步长得到更高的精度, 实际上就是Runge-Kutta算法的思路.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MATLAB制作2048game和auto-player (2)</title>
      <link>/2018/09/matlab%E5%88%B6%E4%BD%9C2048game%E5%92%8Cauto-player-2/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/09/matlab%E5%88%B6%E4%BD%9C2048game%E5%92%8Cauto-player-2/</guid>
      <description>&lt;p&gt;这一节先说说怎么写一个2048的GUI界面, 2048的规则很简单, 沿着某一个方向滑动可以将该方向上相同的数字合并.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MATLAB制作2048game和auto-player (1)</title>
      <link>/2018/08/matlab%E5%88%B6%E4%BD%9C2048game%E5%92%8Cauto-player-1/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/matlab%E5%88%B6%E4%BD%9C2048game%E5%92%8Cauto-player-1/</guid>
      <description>&lt;p&gt;这一系列的博客用于介绍如何使用&lt;code&gt;MATLAB&lt;/code&gt;编写一个可以自动玩的2048game, 主要包括GUI的编写, 极大极小树的应用等等.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tight binding model</title>
      <link>/2018/08/tight-binding-model/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/tight-binding-model/</guid>
      <description></description>
    </item>
    
    <item>
      <title>分形理论</title>
      <link>/2018/08/iteration_fractal/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/iteration_fractal/</guid>
      <description>&lt;p&gt;分形简单来说就是具有自相似性质的图形, 其Hausdorff 维度一般来说是分数的, 与常规认知的维度不同.
我虽然很早就接触过分形, 但是并没有画过分形的图, 这里写一下画分形的代码&amp;hellip;先介绍一个简单的分形图形, 再说说经典的Julia集合, Kuch 雪花曲线等等&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>牛顿法求解极小值</title>
      <link>/2018/08/%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E8%A7%A3%E6%9E%81%E5%B0%8F%E5%80%BC/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E8%A7%A3%E6%9E%81%E5%B0%8F%E5%80%BC/</guid>
      <description>&lt;p&gt;这一节我们来使用牛顿法做优化, 之前在一维搜索方法中提到过牛顿法, 即为使用二次函数来近似某点周围的函数, 从而达到简化问题的效果. 本节也是通过类似的方法来实现函数的极值的求解的.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>三维曲线的插值方法</title>
      <link>/2018/08/%E4%B8%89%E7%BB%B4%E6%9B%B2%E7%BA%BF%E7%9A%84%E6%8F%92%E5%80%BC%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/%E4%B8%89%E7%BB%B4%E6%9B%B2%E7%BA%BF%E7%9A%84%E6%8F%92%E5%80%BC%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;一般而言, 二元函数或者曲面面的插值maltab已经有很强大的库函数了, 例如三次样条插值&lt;code&gt;spline&lt;/code&gt;, 曲面插值&lt;code&gt;interp, interp2, griddata&lt;/code&gt;等等. 但是对于一组三维曲线的拟合似乎并没有很好的函数可以解决这个问题, 本文简单介绍一下我的方法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>梯度下降法求解函数极小值-1</title>
      <link>/2018/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%B1%82%E8%A7%A3%E5%87%BD%E6%95%B0%E6%9E%81%E5%B0%8F%E5%80%BC-1/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%B1%82%E8%A7%A3%E5%87%BD%E6%95%B0%E6%9E%81%E5%B0%8F%E5%80%BC-1/</guid>
      <description>&lt;p&gt;我们知道, 函数沿着负梯度方向下降是最快的, 因此利用梯度下降法是计算函数极小值的常用的方法.因此如果我们确定一个初始点\(x_0\), 那么利用迭代公式:&lt;/p&gt;

&lt;p&gt;$$x_{k+1} = x_k - \alpha_k \nabla f(x_k) $$&lt;/p&gt;

&lt;p&gt;其中\(\alpha_k\)为步长.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从傅里叶变换的卷积定理推导中心极限定理</title>
      <link>/2018/08/%E4%BB%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E5%8D%B7%E7%A7%AF%E5%AE%9A%E7%90%86%E6%8E%A8%E5%AF%BC%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/%E4%BB%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E5%8D%B7%E7%A7%AF%E5%AE%9A%E7%90%86%E6%8E%A8%E5%AF%BC%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</guid>
      <description>&lt;p&gt;首先膜一波傅里叶变换公式
\begin{equation}
\hat{f}(\omega) = \int f(t) e^{-i\omega t} dt
\end{equation}
\begin{equation}
f(t) = \frac{1}{2\pi} \int \hat{f}(\omega)e^{j\omega t}d\omega
\end{equation}
&lt;div align=center&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ChangChunHe/Blog_image/master/Fourier_transform_time_and_frequency_domains.gif&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一维函数的极小值搜索方法</title>
      <link>/2018/08/%E4%B8%80%E7%BB%B4%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%B0%8F%E5%80%BC%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/%E4%B8%80%E7%BB%B4%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%B0%8F%E5%80%BC%E6%90%9C%E7%B4%A2%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;求一个函数的极小值或者是最小值一般来说是一个很复杂的问题, 涉及到全局优化的问题, 从最开始的梯度下降, 共轭梯度, 牛顿法以及衍生出来的准牛顿法等等都可以较好地搜索到局域极小值. 这里我们先以一元函数为例, 简述求解其极小值的几种方法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>numpy中读取文件的两种方法, loadtxt和genfromtxt</title>
      <link>/2018/08/numpy%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95-loadtxt%E5%92%8Cgenfromtxt/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/numpy%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95-loadtxt%E5%92%8Cgenfromtxt/</guid>
      <description>&lt;p&gt;numpy中有两个函数可以用来读取txt文件, 下面主要来介绍这两个函数的用法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MATLAB如何读取和写入文本文件</title>
      <link>/2018/08/matlab%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/matlab%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;这篇博客来讲一讲MATLAB如何读取文本文件.&lt;/p&gt;

&lt;p&gt;如果是标准的矩阵类型的文本文件, 可以使用&lt;code&gt;data = load(filename)&lt;/code&gt;来快速便捷读取文件并储存在变量&lt;code&gt;data&lt;/code&gt;中, 这里就不再赘述.下面主要讲讲几种较为复杂的文本文件的读取, 以及简单的文件写入.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>